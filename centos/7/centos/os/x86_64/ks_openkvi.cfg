# Kickstart for OVNI installation
install
# Reboot after install
reboot --eject
#cdrom
lang en_US.UTF-8
##KEYBOARD##
##NETWORK: network --device=eth0 --bootproto=dhcp  --hostname=##KVM_HOST##-OpenKVI
network --bootproto=query
firewall --disabled
selinux --disabled
authconfig --enableshadow --enablemd5
timezone UTC
zerombr
bootloader --location=mbr
#Disk partitioning
%include /tmp/part-include


%packages
# <BASE>
## <Commmon>
#perl-suidperl
#compat-libtermcap
screen
vim-enhanced
python-paramiko
avahi-tools
tuned
net-snmp
dos2unix
trickle
libgcc
tree
mlocate
pciutils
## </Common>
## <System tools>
ipmitool
OpenIPMI
freeipmi
lrzsz
collectd
collectd-ipmi
collectd-rrdtool
collectd-sensors
collectd-snmp
collectd-nginx
#yum-plugin-security
ncurses
nfs-utils
#ncx-yum-repo
#network-reorder
#ncx-linux-tools
virt-tools
firstboot-config
onectl
onectl-plugins-network
onectl-plugins-neighbors
wget
## </System tools>
# </BASE>
# <openkvi>
java-1.7.0-openjdk
libvirt-client
libvirt-python
virt-top
ImageMagick
#mod_python
postgresql-server
openldap-servers
openldap-clients
openkvi
shellinabox
nginx
#python-argcomplete
python-psycopg2
# </openkvi>
##########################################################
## END OF PACKAGES              ##########################
%end
##########################################################


%pre
#load specific boot args into variables
#args=`more /proc/cmdline | sed 's/ /\n/g'`

MEM_KO=`cat /proc/meminfo | sed -e "s/ kB.*//" | sed -e "s/.* //" | head -n1`
: $((MEM_MO = MEM_KO / 1000 ))
: $((MEM_GO = MEM_MO / 1000 ))
if [ $MEM_GO -le 2 ] ; then
        : $((SWAP_SIZE = MEM_MO * 3 / 2 ))
elif [ $MEM_GO -gt 2 -a $MEM_GO -le 8 ] ; then
        SWAP_SIZE=$MEM_MO
elif [ $MEM_GO -gt 8 -a $MEM_GO -le 14 ] ; then
        : $((SWAP_SIZE = MEM_MO * 3 / 4 ))
else
        SWAP_SIZE=10240
fi

#Look for hard drives (up to 4)
disk1_path=`sfdisk -l 2> /dev/null | sed -n 's#^Disk \(/dev/[^ ]*\)\ #\1 #p' |  awk '{print FNR ":"$0}' | grep -E ^1 | cut -d ':' -f2`
disk2_path=`sfdisk -l 2> /dev/null | sed -n 's#^Disk \(/dev/[^ ]*\)\ #\1 #p' |  awk '{print FNR ":"$0}' | grep -E ^2 | cut -d ':' -f2`
disk3_path=`sfdisk -l 2> /dev/null | sed -n 's#^Disk \(/dev/[^ ]*\)\ #\1 #p' |  awk '{print FNR ":"$0}' | grep -E ^3 | cut -d ':' -f2`
disk4_path=`sfdisk -l 2> /dev/null | sed -n 's#^Disk \(/dev/[^ ]*\)\ #\1 #p' |  awk '{print FNR ":"$0}' | grep -E ^4 | cut -d ':' -f2`

disk1_name=`sfdisk -l 2> /dev/null | sed -n 's#^Disk \(/dev/[^ ]*\)\ #\1 #p' |  awk '{print FNR ":"$0}' | grep -E ^1 | cut -d ':' -f2 | sed -e 's/\/dev\///'`
disk2_name=`sfdisk -l 2> /dev/null | sed -n 's#^Disk \(/dev/[^ ]*\)\ #\1 #p' |  awk '{print FNR ":"$0}' | grep -E ^2 | cut -d ':' -f2 | sed -e 's/\/dev\///'`
disk3_name=`sfdisk -l 2> /dev/null | sed -n 's#^Disk \(/dev/[^ ]*\)\ #\1 #p' |  awk '{print FNR ":"$0}' | grep -E ^3 | cut -d ':' -f2 | sed -e 's/\/dev\///'`
disk4_name=`sfdisk -l 2> /dev/null | sed -n 's#^Disk \(/dev/[^ ]*\)\ #\1 #p' |  awk '{print FNR ":"$0}' | grep -E ^4 | cut -d ':' -f2 | sed -e 's/\/dev\///'`

#Size in Go for each drive
if ! [ -z  $disk1_path  ] ; then
        nb_disk=1
        size_disk1=`sfdisk -s $disk1_path`
        size_disk1_Go=$(($size_disk1 / 1024 / 1024))
fi
if [ $size_disk1_Go -lt "30" ] ; then
        nb_disk=-1
fi
case "$nb_disk" in
	1)
	        # 1 hdd
	        echo "clearpart --all --initlabel" > /tmp/part-include
	        echo "part /boot --fstype ext3 --size=512 --asprimary" >> /tmp/part-include
	        echo "part / --fstype ext3 --size=1024 --grow --asprimary" >> /tmp/part-include
		#echo "part /opt --fstype=ext4 --size=1024 --grow --asprimary" >> /tmp/part-include
	        echo "part swap --size=$SWAP_SIZE --asprimary" >> /tmp/part-include
	        ;;
	2)
	        # 2 hdd
	        ;;
	3)
	        # 3 hdd
	        ;;
	4)
	        # 4 hdd
	        ;;
	*)
	        #default
	        echo "clearpart --all --initlabel" > /tmp/part-include
	        echo "part swap --size=$SWAP_SIZE --asprimary" >> /tmp/part-include
	        echo "part / --fstype ext3 --size=1024 --grow --asprimary" >> /tmp/part-include
	        ;;
	esac
##########################################################
## END OF PRE                   ##########################
%end
##########################################################


%post --log=/root/openkvi-install.log
NUMBER_OF_RPMS=540
VERSION=7.2.0
PROFILE=openkvi
DISTRIB="CentOS 7"
echo "$DISTRIB [installed: "$(date +%F)", profile: $PROFILE, version: $VERSION]" > /etc/redhat-release
ln -s /etc/redhat-release /etc/netcentrex-release

# Reorder network devices
/usr/bin/network-reorder

# Bring all network devices up
onectl net.devices --all up
onectl net.bonds --set none
onectl net.vlans --set none

# prepare-kvm-system.sh is isntalled by firstboot RPM
echo 'sh /usr/local/firstboot/prepare-openkvi-system.sh 1>/tmp/openkvi_build.log 2>&1' >> /etc/rc.d/rc.local
echo 'perl -p -i -e "s/.*prepare-openkvi-system.*\n//" /etc/rc.d/rc.local' >> /etc/rc.d/rc.local

##########################################################
## END OF POST                  ##########################
%end
##########################################################

%post --nochroot
##########################################################
## END OF POST NOCHROOT         ##########################
%end
##########################################################
