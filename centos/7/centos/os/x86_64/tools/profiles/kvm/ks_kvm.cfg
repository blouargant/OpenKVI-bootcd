# Kickstart for KVM node installation
install
# Reboot after install
reboot --eject
#cdrom
lang en_US.UTF-8
#keyboard fr-latin1
#network --bootproto=dhcp --hostname= 
#rootpw --iscrypted $1$fmZsUMqM$Rv/OSDPXzIvTFk039t4IO0
firewall --disabled
selinux --disabled
authconfig --enableshadow --enablemd5
timezone UTC
zerombr
bootloader --location=mbr
# System pre configuration
#%include /tmp/sys-include
firstboot --enable
#Disk partitioning
%include /tmp/part-include

%packages
genisoimage
pam_krb5
ebtables
screen
tree
dos2unix
vim-enhanced
mlocate
pciutils
## </Base>
## <Virtualisation>
libvirt
virt-top
netcf-libs
#arping 
libguestfs
#python-libguestfs
#libguestfs-winsupport
qemu-kvm-ev
tuned
avahi
#virt-v2v
shellinabox
## </Virtualisation>
## <System tools>
ipmitool
OpenIPMI
freeipmi
net-snmp
firstboot-config
yum-utils
#ncx-linux-tools
virt-tools
#ncx-yum-repo
lrzsz
collectd
collectd-ipmi
collectd-rrdtool
collectd-sensors
collectd-snmp
collectd-virt
ncurses
nfs-utils
onectl
onectl-plugins-kvm
onectl-plugins-neighbors
wget
## </System tools>
## <Networking>
#network-reorder
openvswitch
openvswitch-ovn
openvswitch-kmod
python-openvswitch
openvswitch-selinux-policy
dpdk
dpdk-tools
dpdk-doc
## </Networking>
# RPM to be installed
# depending on target hardware
#%include /tmp/rpms.lst
##########################################################
%end
##########################################################

%pre
#load specific boot args into variables
args=$(more /proc/cmdline | sed 's/ /\n/g')
MODE="install"
for anarg in $args; do
	if [ "$anarg" == "reinstall" ]; then
		MODE="reinstall"
	fi
done

echo '#RPM List' > /tmp/rpms.lst
KVM=`egrep '^flags.*(vmx|svm)' /proc/cpuinfo | head -n1`
MANUFACTURER=$(dmidecode -s system-manufacturer | grep -v "#")

#if [ ! "$KVM" ]; then
#    echo "qemu" >> /tmp/rpms.lst
#fi
#
#if [ "$MANUFACTURER" == "HP" ]; then
#    echo "hpacucli" >> /tmp/rpms.lst
#    echo "hp-health" >> /tmp/rpms.lst
#    echo "hp-snmp-agents" >> /tmp/rpms.lst
#    echo "hp-ams" >> /tmp/rpms.lst
#fi


MEM_KO=`cat /proc/meminfo | sed -e "s/ kB.*//" | sed -e "s/.* //" | head -n1`
: $((MEM_MO = MEM_KO / 1000 ))
: $((MEM_GO = MEM_MO / 1000 ))
if [ $MEM_GO -le 2 ] ; then
	: $((SWAP_SIZE = MEM_MO * 3 / 2 ))
elif [ $MEM_GO -gt 2 -a $MEM_GO -le 8 ] ; then
	SWAP_SIZE=$MEM_MO
elif [ $MEM_GO -gt 8 -a $MEM_GO -le 14 ] ; then
	: $((SWAP_SIZE = MEM_MO * 3 / 4 ))
else
	SWAP_SIZE=10240
fi

#Look for hard drives (up to 4)
disk1_path=`sfdisk -l 2> /dev/null | sed -n 's#^Disk \(/dev/[^ ]*\)\ #\1 #p' |  awk '{print FNR ":"$0}' | grep -E ^1 | cut -d ':' -f2`
disk2_path=`sfdisk -l 2> /dev/null | sed -n 's#^Disk \(/dev/[^ ]*\)\ #\1 #p' |  awk '{print FNR ":"$0}' | grep -E ^2 | cut -d ':' -f2`
disk3_path=`sfdisk -l 2> /dev/null | sed -n 's#^Disk \(/dev/[^ ]*\)\ #\1 #p' |  awk '{print FNR ":"$0}' | grep -E ^3 | cut -d ':' -f2`
disk4_path=`sfdisk -l 2> /dev/null | sed -n 's#^Disk \(/dev/[^ ]*\)\ #\1 #p' |  awk '{print FNR ":"$0}' | grep -E ^4 | cut -d ':' -f2`

disk1_name=`sfdisk -l 2> /dev/null | sed -n 's#^Disk \(/dev/[^ ]*\)\ #\1 #p' |  awk '{print FNR ":"$0}' | grep -E ^1 | cut -d ':' -f2 | sed -e 's/\/dev\///'`
disk2_name=`sfdisk -l 2> /dev/null | sed -n 's#^Disk \(/dev/[^ ]*\)\ #\1 #p' |  awk '{print FNR ":"$0}' | grep -E ^2 | cut -d ':' -f2 | sed -e 's/\/dev\///'`
disk3_name=`sfdisk -l 2> /dev/null | sed -n 's#^Disk \(/dev/[^ ]*\)\ #\1 #p' |  awk '{print FNR ":"$0}' | grep -E ^3 | cut -d ':' -f2 | sed -e 's/\/dev\///'`
disk4_name=`sfdisk -l 2> /dev/null | sed -n 's#^Disk \(/dev/[^ ]*\)\ #\1 #p' |  awk '{print FNR ":"$0}' | grep -E ^4 | cut -d ':' -f2 | sed -e 's/\/dev\///'`

#Size in Go for each drive
if ! [ -z  $disk1_path  ] ; then
	nb_disk=1
	size_disk1=`sfdisk -s $disk1_path`
	size_disk1_Go=$(($size_disk1 / 1024 / 1024))
fi
if [ $size_disk1_Go -lt "30" ] ; then
	nb_disk=-1
fi
case "$nb_disk" in
	1)
		# 1 hdd
		if [ "$MODE" == "install" ]; then
			echo "clearpart --all --initlabel" > /tmp/part-include
			echo "part /boot --fstype ext3 --size=512 --asprimary" >> /tmp/part-include
			echo "part pv.01 --size 1 --grow" >> /tmp/part-include
			echo "volgroup mainvg pv.01" >> /tmp/part-include
			echo "logvol / --name=root_vol --vgname=mainvg --fstype=ext4 --size=10240" >> /tmp/part-include
			echo "logvol swap --fstype swap --name=swap --vgname=mainvg --size=$SWAP_SIZE" >> /tmp/part-include
			echo "logvol /opt --name=kvm_vol --vgname=mainvg --fstype=ext4 --size=1024 --grow" >> /tmp/part-include
		else
			disk_1=$disk1_path"1"
			disk_2=$disk1_path"2"
			echo "part /boot --onpart=$disk_1 --fstype ext3 --size=512 --asprimary" >> /tmp/part-include
			echo "part pv.01 --noformat --onpart=$disk_2 --size 1 --grow" >> /tmp/part-include
			echo "volgroup mainvg --noformat --useexisting" >> /tmp/part-include
			echo "logvol / --useexisting --name=root_vol --vgname=mainvg --fstype=ext4 --size=10240" >> /tmp/part-include
			echo "logvol swap --useexisting --fstype swap --name=swap --vgname=mainvg --size=$SWAP_SIZE" >> /tmp/part-include
			echo "logvol /opt --useexisting --noformat --name=kvm_vol --vgname=mainvg --fstype=ext4 --size=1024 --grow" >> /tmp/part-include
		fi
		#echo "part / --fstype ext3 --size=10240 --asprimary" >> /tmp/part-include
		#echo "part /opt --fstype=ext4 --size=1024 --grow --asprimary" >> /tmp/part-include
		#echo "part swap --size=$SWAP_SIZE --asprimary" >> /tmp/part-include
		;;
	2)
		# 2 hdd
		;;
	3)
		# 3 hdd
		;;
	4)
		# 4 hdd
		;;
	*)
		#default
		echo "clearpart --all --initlabel" > /tmp/part-include
		echo "part swap --size=$SWAP_SIZE --asprimary" >> /tmp/part-include
		echo "part / --fstype ext3 --size=1024 --grow --asprimary" >> /tmp/part-include
		;;
esac
##########################################################
## END OF PRE                   ##########################
%end
##########################################################

%post --log=/root/kvm-install.log
NUMBER_OF_RPMS=0
VERSION=6.4.5
DISTRIB="CentOS release 6"

openkvi=`more /proc/cmdline | sed 's/ /\n/g' | grep ^openkvi`
if [ -z $openkvi ]; then
	PROFILE="kvm"
else
	PROFILE="kvm & openkvi"
fi

echo "$DISTRIB [installed: "$(date +%F)", profile: $PROFILE, version: $VERSION]" > /etc/redhat-release

# Reorder network devices
#/usr/bin/network-reorder

NETINSTALL=`cat /proc/cmdline | sed 's/ /\n/g' | grep "^ks=nfs"`

if [ $openkvi ]; then
	if [ -z "$NETINSTALL" ]; then
		mkdir -p /media/cdrom
		CDROMS=`ls /dev/ | grep "cdr\|dvd"`
		echo "/dev/cdroms:$CDROMS" >> /root/debug
	
		for drive in $CDROMS; do
			echo "trying /dev/$drive" >> /root/debug
			mount -t auto /dev/$drive /media/cdrom 1>>/root/debug 2>&1
			TEST=`ls /media/cdrom/ks_kvm.cfg 2>&1 | grep -v "No such file"`
			echo "$TEST" >> /root/debug
			if [ "$TEST" ]; then
				echo "found iso" >> /root/debug
				break
			else 
				umount /media/cdrom
			fi
		done
	fi
	# prepare-kvm-system.sh is isntalled firstboot RPM
	sh /usr/local/firstboot/prepare-kvm-system.sh openkvi 1>/tmp/kvm_build.log 2>&1
else
	# prepare-kvm-system.sh is isntalled by firstboot RPM
	sh /usr/local/firstboot/prepare-kvm-system.sh 1>/tmp/kvm_build.log 2>&1
fi
chmod +x /etc/rc.local
##########################################################
## END OF POST                  ##########################
%end
##########################################################


%post --nochroot

##########################################################
## END OF POST NOCHROOT         ##########################
%end
##########################################################
